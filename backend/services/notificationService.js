const Telegram = require('telegram');
const nodemailer = require('nodemailer');
const logger = require('../utils/logger');
const Notification = require('../models/Notification');
const User = require('../models/User');

class NotificationService {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        this.telegramBot = new Telegram(process.env.TELEGRAM_BOT_TOKEN);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        this.emailTransporter = nodemailer.createTransporter({
            host: process.env.SMTP_HOST,
            port: process.env.SMTP_PORT,
            secure: process.env.SMTP_SECURE === 'true',
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS
            }
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
    async sendTelegramNotification(notification) {
        try {
            const { telegramId } = notification.recipient;
            const { title, content, data } = notification;

            let message = `*${title}*\n\n${content}`;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å actionUrl
            if (data?.actionUrl) {
                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: data.buttonText || '–û—Ç–∫—Ä—ã—Ç—å',
                            url: data.actionUrl
                        }
                    ]]
                };

                await this.telegramBot.api.sendMessage({
                    chat_id: telegramId,
                    text: message,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            } else {
                await this.telegramBot.api.sendMessage({
                    chat_id: telegramId,
                    text: message,
                    parse_mode: 'Markdown'
                });
            }

            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            await notification.markAsSent('telegram');
            logger.info(`Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);

            return true;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            await notification.markAsFailed('telegram', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendEmailNotification(notification) {
        try {
            const user = await User.findById(notification.recipient.userId);
            if (!user || !user.notifications.email) {
                return false;
            }

            const { title, content, data } = notification;

            const mailOptions = {
                from: process.env.EMAIL_FROM,
                to: user.email,
                subject: title,
                html: this.generateEmailTemplate(title, content, data)
            };

            await this.emailTransporter.sendMail(mailOptions);

            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            await notification.markAsSent('email');
            logger.info(`Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}`);

            return true;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            await notification.markAsFailed('email', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendPushNotification(notification) {
        try {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push —Å–µ—Ä–≤–∏—Å–∞–º–∏ (Firebase, OneSignal –∏ —Ç.–¥.)
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(`Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.recipient.userId}`);

            await notification.markAsSent('push');
            return true;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            await notification.markAsFailed('push', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendInAppNotification(notification) {
        try {
            // In-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            await notification.markAsSent('inApp');
            logger.info(`In-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${notification.recipient.userId}`);
            return true;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            await notification.markAsFailed('inApp', error.message);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
    async sendNotification(notification) {
        try {
            notification.status = 'sending';
            await notification.save();

            const promises = [];

            if (notification.channels.telegram) {
                promises.push(this.sendTelegramNotification(notification));
            }

            if (notification.channels.email) {
                promises.push(this.sendEmailNotification(notification));
            }

            if (notification.channels.push) {
                promises.push(this.sendPushNotification(notification));
            }

            if (notification.channels.inApp) {
                promises.push(this.sendInAppNotification(notification));
            }

            await Promise.allSettled(promises);

            return true;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            notification.status = 'failed';
            await notification.save();
            return false;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async createAndSend(notificationData) {
        try {
            const notification = new Notification(notificationData);
            await notification.save();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            setImmediate(() => this.sendNotification(notification));

            return notification;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            throw error;
        }
    }

    // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async sendBulkNotifications(notificationsData) {
        try {
            const notifications = await Notification.createBulk(notificationsData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            notifications.forEach(notification => {
                setImmediate(() => this.sendNotification(notification));
            });

            logger.info(`–°–æ–∑–¥–∞–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏`);
            return notifications;
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async sendWelcomeNotification(userId, telegramId) {
        const notificationData = {
            recipient: { userId, telegramId },
            type: 'welcome',
            title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ',
            content: '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –ü–µ—Ç—Ä–∞ –õ—É–ø–µ–Ω–∫–æ! –£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è.',
            priority: 'high',
            channels: {
                telegram: true,
                inApp: true
            }
        };

        return this.createAndSend(notificationData);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–∞—Å—Ç–µ
    async sendNewPodcastNotification(userIds, podcastId, podcastTitle) {
        const notificationsData = userIds.map(userId => ({
            recipient: { userId, telegramId: 0 }, // telegramId –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            type: 'new_podcast',
            title: '–ù–æ–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! üéß',
            content: `–í—ã—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç "${podcastTitle}". –°–ª—É—à–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
            data: {
                podcastId,
                actionUrl: `${process.env.FRONTEND_URL}/podcasts-details.html?id=${podcastId}`,
                buttonText: '–°–ª—É—à–∞—Ç—å'
            },
            priority: 'normal',
            channels: {
                telegram: true,
                inApp: true
            }
        }));

        return this.sendBulkNotifications(notificationsData);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    async sendSubscriptionExpiringNotification(userId, telegramId, daysLeft) {
        const notificationData = {
            recipient: { userId, telegramId },
            type: 'subscription_expiring',
            title: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç ‚è∞',
            content: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∫–∞—Å—Ç–∞–º.`,
            data: {
                actionUrl: `${process.env.FRONTEND_URL}/checkout.html?type=subscription`,
                buttonText: '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
            },
            priority: 'high',
            channels: {
                telegram: true,
                email: true,
                inApp: true
            }
        };

        return this.createAndSend(notificationData);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    async sendPaymentSuccessNotification(userId, telegramId, amount, type) {
        const typeText = type === 'subscription' ? '–ø–æ–¥–ø–∏—Å–∫—É' : '–ø–æ–¥–∫–∞—Å—Ç';
        const notificationData = {
            recipient: { userId, telegramId },
            type: 'payment_success',
            title: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ',
            content: `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ${typeText} –Ω–∞ —Å—É–º–º—É ${amount} ‚ÇΩ. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!`,
            data: {
                amount,
                currency: 'RUB',
                actionUrl: `${process.env.FRONTEND_URL}/success.html?type=${type}`,
                buttonText: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É'
            },
            priority: 'normal',
            channels: {
                telegram: true,
                inApp: true
            }
        };

        return this.createAndSend(notificationData);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —à–∞–±–ª–æ–Ω–∞ –¥–ª—è email
    generateEmailTemplate(title, content, data) {
        return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: #422B23; color: white; padding: 20px; text-align: center; }
            .content { padding: 20px; background: #f9f9f9; }
            .button { display: inline-block; padding: 12px 24px; background: #422B23; color: white; text-decoration: none; border-radius: 6px; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>${title}</h1>
            </div>
            <div class="content">
              <p>${content}</p>
              ${data?.actionUrl ? `<p><a href="${data.actionUrl}" class="button">${data.buttonText || '–û—Ç–∫—Ä—ã—Ç—å'}</a></p>` : ''}
            </div>
            <div class="footer">
              <p>–ü—Ä–æ–µ–∫—Ç—ã –ü–µ—Ç—Ä–∞ –õ—É–ø–µ–Ω–∫–æ</p>
              <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ</p>
            </div>
          </div>
        </body>
      </html>
    `;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö pending —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async processPendingNotifications() {
        try {
            const pendingNotifications = await Notification.findPending();
            logger.info(`–ù–∞–π–¥–µ–Ω–æ ${pendingNotifications.length} pending —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

            for (const notification of pendingNotifications) {
                await this.sendNotification(notification);
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async cleanupOldNotifications() {
        try {
            const result = await Notification.cleanupOld();
            logger.info(`–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
        }
    }
}

module.exports = new NotificationService();
