const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const connectDB = require('./config/database');
const logger = require('./utils/logger');
const errorHandler = require('./middleware/errorHandler');
const authMiddleware = require('./middleware/auth');

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const projectRoutes = require('./routes/projects');
const podcastRoutes = require('./routes/podcasts');
const userRoutes = require('./routes/users');
const analyticsRoutes = require('./routes/analytics');
const notificationRoutes = require('./routes/notifications');
const paymentRoutes = require('./routes/payments');

const app = express();
const PORT = process.env.PORT || 5000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());
app.use(compression());

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use('/api/', limiter);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/uploads', express.static('uploads'));

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/projects', authMiddleware, projectRoutes);
app.use('/api/podcasts', authMiddleware, podcastRoutes);
app.use('/api/users', authMiddleware, userRoutes);
app.use('/api/analytics', authMiddleware, analyticsRoutes);
app.use('/api/notifications', authMiddleware, notificationRoutes);
app.use('/api/payments', paymentRoutes);

// Health check
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// Error handler
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  logger.info(`üì± Telegram Mini App Backend –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

module.exports = app;
